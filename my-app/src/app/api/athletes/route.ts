import { NextResponse, type NextRequest } from 'next/server'
import { Prisma } from '@prisma/client'
import prisma from '@/lib/prisma'

export async function POST(request: NextRequest) {
  try {
    const data: Prisma.AthleteCreateInput = await request.json()
    
    const newAthlete = await prisma.athlete.create({
      data: {
        ...data,
        birthdate: new Date(data.birthdate),
        // Removed manual timestamp fields as they're auto-generated by Prisma
      }
    })
    
    return NextResponse.json(newAthlete, { status: 201 })
    
  } catch (error) {
    if (error instanceof Error && 'code' in error && error.code === 'P2002') {
      return NextResponse.json(
        { error: "Email already exists" },
        { status: 409 }
      )
    }
    return NextResponse.json(
      { error: "Validation error - check required fields" },
      { status: 400 }
    )
  }
}

export async function GET() {
  const athletes = await prisma.athlete.findMany()
  return NextResponse.json(athletes)
}

export async function PUT(request: NextRequest) {
  try {
    const pathSegments = request.nextUrl.pathname.split('/')
    const id = pathSegments[pathSegments.length - 1]
    if (!id || isNaN(parseInt(id))) {
      return NextResponse.json(
        { error: "Missing or invalid athlete ID" },
        { status: 400 }
      )
    }
    
    const updateData = await request.json()
    
    // Prevent updating protected fields
    delete updateData.id
    delete updateData.email
    
    const updatedAthlete = await prisma.athlete.update({
      where: { id: parseInt(id) },
      data: {
        ...updateData,
        birthdate: updateData.birthdate ? new Date(updateData.birthdate) : undefined
      }
    })
    
    return NextResponse.json(updatedAthlete)
    
  } catch (error) {
    console.error('Update athlete error:', error)
    return NextResponse.json(
      { error: "Failed to update athlete - invalid ID or data format" },
      { status: 400 }
    )
  }
}

export async function DELETE(request: NextRequest) {
  try {
    const pathSegments = request.nextUrl.pathname.split('/')
    const id = pathSegments[pathSegments.length - 1]
    
    if (!id || isNaN(parseInt(id))) {
      return NextResponse.json(
        { error: "Missing or invalid athlete ID" },
        { status: 400 }
      )
    }
    
    // Check for existing performances
    const performances = await prisma.performance.findMany({
      where: { athleteId: parseInt(id) }
    })
    
    if (performances.length > 0) {
      return NextResponse.json(
        { error: "Cannot delete athlete with existing performances" },
        { status: 409 }
      )
    }

    // Delete athlete
    await prisma.athlete.delete({
      where: { id: parseInt(id) }
    })
    
    return new Response(null, { status: 204 })
    
  } catch (error) {
    console.error('Delete athlete error:', error)
      return NextResponse.json(
        { error: "Athlete not found" },
        { status: 404 }
    )
  }
}
